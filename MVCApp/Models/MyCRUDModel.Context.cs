//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MusicStoreApp.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ChinookEntities : DbContext
    {
        public ChinookEntities()
            : base("name=ChinookEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Album> Albums { get; set; }
        public virtual DbSet<Artist> Artists { get; set; }
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<Genre> Genres { get; set; }
        public virtual DbSet<Invoice> Invoices { get; set; }
        public virtual DbSet<InvoiceLine> InvoiceLines { get; set; }
        public virtual DbSet<MediaType> MediaTypes { get; set; }
        public virtual DbSet<Playlist> Playlists { get; set; }
        public virtual DbSet<Track> Tracks { get; set; }
    
        public virtual ObjectResult<spCustomerContactDetails_Result> spCustomerContactDetails(Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo)
        {
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spCustomerContactDetails_Result>("spCustomerContactDetails", dateFromParameter, dateToParameter);
        }
    
        public virtual int spInvoiceStatTable()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInvoiceStatTable");
        }
    
        public virtual ObjectResult<spOrderDetails_Result> spOrderDetails(Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, string employeeFN, string employeeLN, string customerFN, string customerLN)
        {
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var employeeFNParameter = employeeFN != null ?
                new ObjectParameter("EmployeeFN", employeeFN) :
                new ObjectParameter("EmployeeFN", typeof(string));
    
            var employeeLNParameter = employeeLN != null ?
                new ObjectParameter("EmployeeLN", employeeLN) :
                new ObjectParameter("EmployeeLN", typeof(string));
    
            var customerFNParameter = customerFN != null ?
                new ObjectParameter("CustomerFN", customerFN) :
                new ObjectParameter("CustomerFN", typeof(string));
    
            var customerLNParameter = customerLN != null ?
                new ObjectParameter("CustomerLN", customerLN) :
                new ObjectParameter("CustomerLN", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spOrderDetails_Result>("spOrderDetails", dateFromParameter, dateToParameter, employeeFNParameter, employeeLNParameter, customerFNParameter, customerLNParameter);
        }
    
        public virtual ObjectResult<spTop10Tracks_Result> spTop10Tracks(Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo)
        {
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spTop10Tracks_Result>("spTop10Tracks", dateFromParameter, dateToParameter);
        }
    
        public virtual ObjectResult<spTopGenres_Result> spTopGenres()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spTopGenres_Result>("spTopGenres");
        }
    
        public virtual ObjectResult<spXTopArtists_Result> spXTopArtists(Nullable<long> topX, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo)
        {
            var topXParameter = topX.HasValue ?
                new ObjectParameter("TopX", topX) :
                new ObjectParameter("TopX", typeof(long));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spXTopArtists_Result>("spXTopArtists", topXParameter, dateFromParameter, dateToParameter);
        }
    }
}
